# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# A time string with format HH:mm:ss.SSS
scalar Time

# The `Upload` scalar type represents a file upload.
scalar Upload

type Error {
  code: String!
  message: String
}

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  ne: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  ne: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  ne: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  ne: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  ne: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  ne: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  ne: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

type ComponentBasicsCredits {
  id: ID!
  source_language: LanguageEntityResponse
  transcribers(
    filters: RecorderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecorderRelationResponseCollection
  translators(
    filters: RecorderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecorderRelationResponseCollection
  proofreaders(
    filters: RecorderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecorderRelationResponseCollection
  scanners(
    filters: RecorderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecorderRelationResponseCollection
  cleaners(
    filters: RecorderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecorderRelationResponseCollection
  typesetters(
    filters: RecorderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecorderRelationResponseCollection
  subbers(
    filters: RecorderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecorderRelationResponseCollection
  footnotes: String
}

input ComponentBasicsDatepickerInput {
  id: ID
  year: Int
  month: Int
  day: Int
}

type ComponentBasicsDatepicker {
  id: ID!
  year: Int
  month: Int
  day: Int
}

input ComponentBasicsPriceInput {
  id: ID
  amount: Float
  currency: ID
}

type ComponentBasicsPrice {
  id: ID!
  amount: Float
  currency: CurrencyEntityResponse
}

input ComponentBasicsSizeInput {
  id: ID
  width: Int
  height: Int
  thickness: Int
}

type ComponentBasicsSize {
  id: ID!
  width: Int
  height: Int
  thickness: Int
}

input ComponentCollectionsComponentEventFiltersInput {
  source: SourceFiltersInput
  and: [ComponentCollectionsComponentEventFiltersInput]
  or: [ComponentCollectionsComponentEventFiltersInput]
  not: ComponentCollectionsComponentEventFiltersInput
}

input ComponentCollectionsComponentEventInput {
  id: ID
  translations: [ComponentTranslationsChronologyItemInput]
  source: ID
}

type ComponentCollectionsComponentEvent {
  id: ID!
  translations(
    filters: ComponentTranslationsChronologyItemFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentTranslationsChronologyItem]
  source: SourceEntityResponse
}

input ComponentCollectionsComponentGlossaryDefinitionFiltersInput {
  source: SourceFiltersInput
  categories: CategoryFiltersInput
  and: [ComponentCollectionsComponentGlossaryDefinitionFiltersInput]
  or: [ComponentCollectionsComponentGlossaryDefinitionFiltersInput]
  not: ComponentCollectionsComponentGlossaryDefinitionFiltersInput
}

input ComponentCollectionsComponentGlossaryDefinitionInput {
  id: ID
  translations: [ComponentTranslationsGlossaryDefinitionInput]
  source: ID
  categories: [ID]
}

type ComponentCollectionsComponentGlossaryDefinition {
  id: ID!
  translations(
    filters: ComponentTranslationsGlossaryDefinitionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentTranslationsGlossaryDefinition]
  source: SourceEntityResponse
  categories(
    filters: CategoryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CategoryRelationResponseCollection
}

input ComponentCollectionsComponentLibraryCoverInput {
  id: ID
  front: ID
  spine: ID
  back: ID
  full: ID
  inside_full: ID
}

type ComponentCollectionsComponentLibraryCover {
  id: ID!
  front: UploadFileEntityResponse
  spine: UploadFileEntityResponse
  back: UploadFileEntityResponse
  full: UploadFileEntityResponse
  inside_full: UploadFileEntityResponse
}

input ComponentCollectionsComponentLibraryDustJacketInput {
  id: ID
  front: ID
  spine: ID
  back: ID
  full: ID
  flap_front: ID
  flap_back: ID
  inside_full: ID
}

type ComponentCollectionsComponentLibraryDustJacket {
  id: ID!
  front: UploadFileEntityResponse
  spine: UploadFileEntityResponse
  back: UploadFileEntityResponse
  full: UploadFileEntityResponse
  flap_front: UploadFileEntityResponse
  flap_back: UploadFileEntityResponse
  inside_full: UploadFileEntityResponse
}

input ComponentCollectionsComponentLibraryImagesInput {
  id: ID
  cover: ComponentCollectionsComponentLibraryCoverInput
  dust_jacket: ComponentCollectionsComponentLibraryDustJacketInput
  obi_belt: ComponentCollectionsComponentLibraryObiBeltInput
}

type ComponentCollectionsComponentLibraryImages {
  id: ID!
  cover: ComponentCollectionsComponentLibraryCover
  dust_jacket: ComponentCollectionsComponentLibraryDustJacket
  obi_belt: ComponentCollectionsComponentLibraryObiBelt
}

input ComponentCollectionsComponentLibraryObiBeltInput {
  id: ID
  front: ID
  spine: ID
  back: ID
  full: ID
  inside_full: ID
  flap_front: ID
  flap_back: ID
}

type ComponentCollectionsComponentLibraryObiBelt {
  id: ID!
  front: UploadFileEntityResponse
  spine: UploadFileEntityResponse
  back: UploadFileEntityResponse
  full: UploadFileEntityResponse
  inside_full: UploadFileEntityResponse
  flap_front: UploadFileEntityResponse
  flap_back: UploadFileEntityResponse
}

input ComponentCollectionsComponentTitlesFiltersInput {
  title: StringFilterInput
  and: [ComponentCollectionsComponentTitlesFiltersInput]
  or: [ComponentCollectionsComponentTitlesFiltersInput]
  not: ComponentCollectionsComponentTitlesFiltersInput
}

input ComponentCollectionsComponentTitlesInput {
  id: ID
  title: String
}

type ComponentCollectionsComponentTitles {
  id: ID!
  title: String!
}

input ComponentCollectionsComponentWeaponStoryFiltersInput {
  source: SourceFiltersInput
  categories: CategoryFiltersInput
  and: [ComponentCollectionsComponentWeaponStoryFiltersInput]
  or: [ComponentCollectionsComponentWeaponStoryFiltersInput]
  not: ComponentCollectionsComponentWeaponStoryFiltersInput
}

input ComponentCollectionsComponentWeaponStoryInput {
  id: ID
  translations: [ComponentTranslationsWeaponStoryStoryInput]
  source: ID
  categories: [ID]
}

type ComponentCollectionsComponentWeaponStory {
  id: ID!
  translations(
    filters: ComponentTranslationsWeaponStoryStoryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentTranslationsWeaponStoryStory]
  source: SourceEntityResponse
  categories(
    filters: CategoryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CategoryRelationResponseCollection
}

type ComponentCollectionsComponentWikiDefinition {
  id: ID!
  definition: String
  categories(
    filters: CategoryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CategoryRelationResponseCollection
  source: SourceEntityResponse
}

type ComponentMetadataAudio {
  id: ID!
  subtype: AudioSubtypeEntityResponse
}

enum ENUM_COMPONENTMETADATABOOKS_BINDING_TYPE {
  Paperback
  Hardcover
}

enum ENUM_COMPONENTMETADATABOOKS_PAGE_ORDER {
  Left_to_Right
  Right_to_Left
}

type ComponentMetadataBooks {
  id: ID!
  binding_type: ENUM_COMPONENTMETADATABOOKS_BINDING_TYPE
  page_count: Int
  languages(
    filters: LanguageFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): LanguageRelationResponseCollection
  page_order: ENUM_COMPONENTMETADATABOOKS_PAGE_ORDER!
  subtype: TextualSubtypeEntityResponse
}

type ComponentMetadataGame {
  id: ID!
  platforms(
    filters: GamePlatformFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): GamePlatformRelationResponseCollection
  demo: Boolean!
  audio_languages(
    filters: LanguageFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): LanguageRelationResponseCollection
  sub_languages(
    filters: LanguageFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): LanguageRelationResponseCollection
  interface_languages(
    filters: LanguageFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): LanguageRelationResponseCollection
}

type ComponentMetadataGroup {
  id: ID!
  subtype: GroupSubtypeEntityResponse
  subitems_type: MetadataTypeEntityResponse
}

type ComponentMetadataMerch {
  id: ID!
  merch_item: MerchItemEntityResponse
}

type ComponentMetadataOther {
  id: ID!
}

type ComponentMetadataVideo {
  id: ID!
  subtype: VideoSubtypeEntityResponse
}

input ComponentPageBuilderComponentPaneFiltersInput {
  text: StringFilterInput
  and: [ComponentPageBuilderComponentPaneFiltersInput]
  or: [ComponentPageBuilderComponentPaneFiltersInput]
  not: ComponentPageBuilderComponentPaneFiltersInput
}

type ComponentPageBuilderComponentPane {
  id: ID!
  text: String
}

input ComponentPageBuilderComponentTabFiltersInput {
  text: StringFilterInput
  and: [ComponentPageBuilderComponentTabFiltersInput]
  or: [ComponentPageBuilderComponentTabFiltersInput]
  not: ComponentPageBuilderComponentTabFiltersInput
}

type ComponentPageBuilderComponentTab {
  id: ID!
  text: String
}

type ComponentPageBuilderGallery {
  id: ID!
  gallery(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
}

type ComponentPageBuilderGrid {
  id: ID!
  column_count: Int!
  panes(
    filters: ComponentPageBuilderComponentPaneFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentPageBuilderComponentPane]
}

type ComponentPageBuilderTabs {
  id: ID!
  tabs(
    filters: ComponentPageBuilderComponentTabFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentPageBuilderComponentTab]
}

type ComponentPageBuilderText {
  id: ID!
  text: String
}

type ComponentRangeGameAspect {
  id: ID!
  note: String
}

type ComponentRangeOther {
  id: ID!
  note: String
}

type ComponentRangePageRange {
  id: ID!
  starting_page: Int!
  ending_page: Int!
}

type ComponentRangeTimeRange {
  id: ID!
  starting_time: Time
  ending_time: Time
}

enum ENUM_COMPONENTSETSAUDIOSET_STATUS {
  Incomplete
  Draft
  Review
  Done
}

input ComponentSetsAudioSetFiltersInput {
  language: LanguageFiltersInput
  status: StringFilterInput
  source_language: LanguageFiltersInput
  dubbers: RecorderFiltersInput
  notes: StringFilterInput
  and: [ComponentSetsAudioSetFiltersInput]
  or: [ComponentSetsAudioSetFiltersInput]
  not: ComponentSetsAudioSetFiltersInput
}

input ComponentSetsAudioSetInput {
  id: ID
  language: ID
  status: ENUM_COMPONENTSETSAUDIOSET_STATUS
  audiofile: [ID]
  source_language: ID
  dubbers: ID
  notes: String
}

type ComponentSetsAudioSet {
  id: ID!
  language: LanguageEntityResponse
  status: ENUM_COMPONENTSETSAUDIOSET_STATUS
  audiofile(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  source_language: LanguageEntityResponse
  dubbers: RecorderEntityResponse
  notes: String
}

enum ENUM_COMPONENTSETSSCANSET_STATUS {
  Incomplete
  Draft
  Review
  Done
}

input ComponentSetsScanSetFiltersInput {
  language: LanguageFiltersInput
  status: StringFilterInput
  source_language: LanguageFiltersInput
  scanners: RecorderFiltersInput
  cleaners: RecorderFiltersInput
  typesetters: RecorderFiltersInput
  notes: StringFilterInput
  and: [ComponentSetsScanSetFiltersInput]
  or: [ComponentSetsScanSetFiltersInput]
  not: ComponentSetsScanSetFiltersInput
}

input ComponentSetsScanSetInput {
  id: ID
  language: ID
  status: ENUM_COMPONENTSETSSCANSET_STATUS
  pages: [ID]
  source_language: ID
  scanners: [ID]
  cleaners: [ID]
  typesetters: [ID]
  notes: String
}

type ComponentSetsScanSet {
  id: ID!
  language: LanguageEntityResponse
  status: ENUM_COMPONENTSETSSCANSET_STATUS!
  pages(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  source_language: LanguageEntityResponse
  scanners(
    filters: RecorderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecorderRelationResponseCollection
  cleaners(
    filters: RecorderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecorderRelationResponseCollection
  typesetters(
    filters: RecorderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecorderRelationResponseCollection
  notes: String
}

enum ENUM_COMPONENTSETSTEXTSET_STATUS {
  Incomplete
  Draft
  Review
  Done
}

input ComponentSetsTextSetFiltersInput {
  language: LanguageFiltersInput
  status: StringFilterInput
  source_language: LanguageFiltersInput
  transcribers: RecorderFiltersInput
  translators: RecorderFiltersInput
  proofreaders: RecorderFiltersInput
  notes: StringFilterInput
  text: StringFilterInput
  and: [ComponentSetsTextSetFiltersInput]
  or: [ComponentSetsTextSetFiltersInput]
  not: ComponentSetsTextSetFiltersInput
}

input ComponentSetsTextSetInput {
  id: ID
  language: ID
  status: ENUM_COMPONENTSETSTEXTSET_STATUS
  source_language: ID
  transcribers: [ID]
  translators: [ID]
  proofreaders: [ID]
  notes: String
  text: String
}

type ComponentSetsTextSet {
  id: ID!
  language: LanguageEntityResponse
  status: ENUM_COMPONENTSETSTEXTSET_STATUS!
  source_language: LanguageEntityResponse
  transcribers(
    filters: RecorderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecorderRelationResponseCollection
  translators(
    filters: RecorderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecorderRelationResponseCollection
  proofreaders(
    filters: RecorderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecorderRelationResponseCollection
  notes: String
  text: String
}

enum ENUM_COMPONENTSETSVIDEOSET_STATUS {
  Incomplete
  Draft
  Review
  Done
}

input ComponentSetsVideoSetFiltersInput {
  language: LanguageFiltersInput
  status: StringFilterInput
  source_language: LanguageFiltersInput
  video_url: StringFilterInput
  subbers: RecorderFiltersInput
  notes: StringFilterInput
  and: [ComponentSetsVideoSetFiltersInput]
  or: [ComponentSetsVideoSetFiltersInput]
  not: ComponentSetsVideoSetFiltersInput
}

input ComponentSetsVideoSetInput {
  id: ID
  language: ID
  status: ENUM_COMPONENTSETSVIDEOSET_STATUS
  source_language: ID
  video_url: String
  subfile: ID
  subbers: ID
  notes: String
}

type ComponentSetsVideoSet {
  id: ID!
  language: LanguageEntityResponse
  status: ENUM_COMPONENTSETSVIDEOSET_STATUS!
  source_language: LanguageEntityResponse
  video_url: String
  subfile: UploadFileEntityResponse
  subbers: RecorderEntityResponse
  notes: String
}

enum ENUM_COMPONENTSETSWIKISET_STATUS {
  Incomplete
  Draft
  Review
  Done
}

input ComponentSetsWikiSetFiltersInput {
  language: LanguageFiltersInput
  status: StringFilterInput
  summary: StringFilterInput
  body: StringFilterInput
  source_language: LanguageFiltersInput
  authors: RecorderFiltersInput
  translators: RecorderFiltersInput
  proofreaders: RecorderFiltersInput
  and: [ComponentSetsWikiSetFiltersInput]
  or: [ComponentSetsWikiSetFiltersInput]
  not: ComponentSetsWikiSetFiltersInput
}

input ComponentSetsWikiSetInput {
  id: ID
  language: ID
  status: ENUM_COMPONENTSETSWIKISET_STATUS
  titles: [ComponentCollectionsComponentTitlesInput]
  summary: String
  body: String
  source_language: ID
  authors: [ID]
  translators: [ID]
  proofreaders: [ID]
}

type ComponentSetsWikiSet {
  id: ID!
  language: LanguageEntityResponse
  status: ENUM_COMPONENTSETSWIKISET_STATUS!
  titles(
    filters: ComponentCollectionsComponentTitlesFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentCollectionsComponentTitles]
  summary: String
  body: String
  source_language: LanguageEntityResponse
  authors(
    filters: RecorderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecorderRelationResponseCollection
  translators(
    filters: RecorderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecorderRelationResponseCollection
  proofreaders(
    filters: RecorderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecorderRelationResponseCollection
}

type ComponentSourceUrlSource {
  id: ID!
  title: String
  url: String
  note: String
  credits: ComponentBasicsCredits!
}

enum ENUM_COMPONENTTRANSLATIONSAUDIOSETS_STATUS {
  Incomplete
  Draft
  Review
  Done
}

type ComponentTranslationsAudioSets {
  id: ID!
  language: LanguageEntityResponse
  audiofile: UploadFileEntityResponse!
  status: ENUM_COMPONENTTRANSLATIONSAUDIOSETS_STATUS!
  credits: ComponentBasicsCredits!
}

input ComponentTranslationsBioFiltersInput {
  language: LanguageFiltersInput
  bio: StringFilterInput
  and: [ComponentTranslationsBioFiltersInput]
  or: [ComponentTranslationsBioFiltersInput]
  not: ComponentTranslationsBioFiltersInput
}

input ComponentTranslationsBioInput {
  id: ID
  language: ID
  bio: String
}

type ComponentTranslationsBio {
  id: ID!
  language: LanguageEntityResponse
  bio: String
}

input ComponentTranslationsChronologyEraFiltersInput {
  title: StringFilterInput
  language: LanguageFiltersInput
  description: StringFilterInput
  and: [ComponentTranslationsChronologyEraFiltersInput]
  or: [ComponentTranslationsChronologyEraFiltersInput]
  not: ComponentTranslationsChronologyEraFiltersInput
}

input ComponentTranslationsChronologyEraInput {
  id: ID
  title: String
  language: ID
  description: String
}

type ComponentTranslationsChronologyEra {
  id: ID!
  title: String!
  language: LanguageEntityResponse
  description: String
}

enum ENUM_COMPONENTTRANSLATIONSCHRONOLOGYITEM_STATUS {
  Incomplete
  Draft
  Review
  Done
}

input ComponentTranslationsChronologyItemFiltersInput {
  language: LanguageFiltersInput
  title: StringFilterInput
  description: StringFilterInput
  note: StringFilterInput
  status: StringFilterInput
  and: [ComponentTranslationsChronologyItemFiltersInput]
  or: [ComponentTranslationsChronologyItemFiltersInput]
  not: ComponentTranslationsChronologyItemFiltersInput
}

input ComponentTranslationsChronologyItemInput {
  id: ID
  language: ID
  title: String
  description: String
  note: String
  status: ENUM_COMPONENTTRANSLATIONSCHRONOLOGYITEM_STATUS
}

type ComponentTranslationsChronologyItem {
  id: ID!
  language: LanguageEntityResponse
  title: String
  description: String
  note: String
  status: ENUM_COMPONENTTRANSLATIONSCHRONOLOGYITEM_STATUS!
}

enum ENUM_COMPONENTTRANSLATIONSGLOSSARYDEFINITION_STATUS {
  Incomplete
  Draft
  Review
  Done
}

input ComponentTranslationsGlossaryDefinitionFiltersInput {
  definition: StringFilterInput
  language: LanguageFiltersInput
  status: StringFilterInput
  and: [ComponentTranslationsGlossaryDefinitionFiltersInput]
  or: [ComponentTranslationsGlossaryDefinitionFiltersInput]
  not: ComponentTranslationsGlossaryDefinitionFiltersInput
}

input ComponentTranslationsGlossaryDefinitionInput {
  id: ID
  definition: String
  language: ID
  status: ENUM_COMPONENTTRANSLATIONSGLOSSARYDEFINITION_STATUS
}

type ComponentTranslationsGlossaryDefinition {
  id: ID!
  definition: String
  language: LanguageEntityResponse
  status: ENUM_COMPONENTTRANSLATIONSGLOSSARYDEFINITION_STATUS!
}

input ComponentTranslationsGlossaryItemFiltersInput {
  title: StringFilterInput
  language: LanguageFiltersInput
  and: [ComponentTranslationsGlossaryItemFiltersInput]
  or: [ComponentTranslationsGlossaryItemFiltersInput]
  not: ComponentTranslationsGlossaryItemFiltersInput
}

input ComponentTranslationsGlossaryItemInput {
  id: ID
  title: String
  language: ID
}

type ComponentTranslationsGlossaryItem {
  id: ID!
  title: String
  language: LanguageEntityResponse
}

type ComponentTranslationsLibraryContent {
  id: ID!
  title: String
  language: LanguageEntityResponse
}

input ComponentTranslationsLibraryItemsFiltersInput {
  description: StringFilterInput
  language: LanguageFiltersInput
  and: [ComponentTranslationsLibraryItemsFiltersInput]
  or: [ComponentTranslationsLibraryItemsFiltersInput]
  not: ComponentTranslationsLibraryItemsFiltersInput
}

input ComponentTranslationsLibraryItemsInput {
  id: ID
  description: String
  language: ID
}

type ComponentTranslationsLibraryItems {
  id: ID!
  description: String!
  language: LanguageEntityResponse
}

enum ENUM_COMPONENTTRANSLATIONSPOSTS_STATUS {
  Incomplete
  Draft
  Review
  Done
}

input ComponentTranslationsPostsFiltersInput {
  title: StringFilterInput
  excerpt: StringFilterInput
  body: StringFilterInput
  language: LanguageFiltersInput
  status: StringFilterInput
  and: [ComponentTranslationsPostsFiltersInput]
  or: [ComponentTranslationsPostsFiltersInput]
  not: ComponentTranslationsPostsFiltersInput
}

input ComponentTranslationsPostsInput {
  id: ID
  title: String
  excerpt: String
  thumbnail: ID
  body: String
  language: ID
  status: ENUM_COMPONENTTRANSLATIONSPOSTS_STATUS
}

type ComponentTranslationsPosts {
  id: ID!
  title: String!
  excerpt: String
  thumbnail: UploadFileEntityResponse
  body: String
  language: LanguageEntityResponse
  status: ENUM_COMPONENTTRANSLATIONSPOSTS_STATUS!
}

enum ENUM_COMPONENTTRANSLATIONSSCANSET_STATUS {
  Incomplete
  Draft
  Review
  Done
}

type ComponentTranslationsScanSet {
  id: ID!
  language: LanguageEntityResponse
  pages(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection!
  status: ENUM_COMPONENTTRANSLATIONSSCANSET_STATUS!
  credits: ComponentBasicsCredits!
}

input ComponentTranslationsSimpleTitleFiltersInput {
  language: LanguageFiltersInput
  title: StringFilterInput
  and: [ComponentTranslationsSimpleTitleFiltersInput]
  or: [ComponentTranslationsSimpleTitleFiltersInput]
  not: ComponentTranslationsSimpleTitleFiltersInput
}

input ComponentTranslationsSimpleTitleInput {
  id: ID
  language: ID
  title: String
}

type ComponentTranslationsSimpleTitle {
  id: ID!
  language: LanguageEntityResponse
  title: String!
}

enum ENUM_COMPONENTTRANSLATIONSTEXTSET_STATUS {
  Incomplete
  Draft
  Review
  Done
}

type ComponentTranslationsTextSet {
  id: ID!
  text: String
  language: LanguageEntityResponse
  status: ENUM_COMPONENTTRANSLATIONSTEXTSET_STATUS!
  credits: ComponentBasicsCredits!
}

input ComponentTranslationsTitleFiltersInput {
  language: LanguageFiltersInput
  title: StringFilterInput
  subtitle: StringFilterInput
  pre_title: StringFilterInput
  description: StringFilterInput
  and: [ComponentTranslationsTitleFiltersInput]
  or: [ComponentTranslationsTitleFiltersInput]
  not: ComponentTranslationsTitleFiltersInput
}

input ComponentTranslationsTitleInput {
  id: ID
  language: ID
  title: String
  subtitle: String
  pre_title: String
  description: String
}

type ComponentTranslationsTitle {
  id: ID!
  language: LanguageEntityResponse
  title: String!
  subtitle: String
  pre_title: String
  description: String
}

enum ENUM_COMPONENTTRANSLATIONSVIDEOSETS_STATUS {
  Incomplete
  Draft
  Review
  Done
}

type ComponentTranslationsVideoSets {
  id: ID!
  language: LanguageEntityResponse
  video_url: String!
  video_embed: String
  subfile: UploadFileEntityResponse
  status: ENUM_COMPONENTTRANSLATIONSVIDEOSETS_STATUS!
  credits: ComponentBasicsCredits!
}

enum ENUM_COMPONENTTRANSLATIONSWEAPONSTORYSTORY_STATUS {
  Incomplete
  Draft
  Review
  Done
}

input ComponentTranslationsWeaponStoryStoryFiltersInput {
  description: StringFilterInput
  level_1: StringFilterInput
  level_2: StringFilterInput
  level_3: StringFilterInput
  level_4: StringFilterInput
  language: LanguageFiltersInput
  status: StringFilterInput
  and: [ComponentTranslationsWeaponStoryStoryFiltersInput]
  or: [ComponentTranslationsWeaponStoryStoryFiltersInput]
  not: ComponentTranslationsWeaponStoryStoryFiltersInput
}

input ComponentTranslationsWeaponStoryStoryInput {
  id: ID
  description: String
  level_1: String
  level_2: String
  level_3: String
  level_4: String
  language: ID
  status: ENUM_COMPONENTTRANSLATIONSWEAPONSTORYSTORY_STATUS
}

type ComponentTranslationsWeaponStoryStory {
  id: ID!
  description: String
  level_1: String
  level_2: String
  level_3: String
  level_4: String
  language: LanguageEntityResponse
  status: ENUM_COMPONENTTRANSLATIONSWEAPONSTORYSTORY_STATUS!
}

input ComponentTranslationsWeaponStoryTypeFiltersInput {
  name: StringFilterInput
  language: LanguageFiltersInput
  and: [ComponentTranslationsWeaponStoryTypeFiltersInput]
  or: [ComponentTranslationsWeaponStoryTypeFiltersInput]
  not: ComponentTranslationsWeaponStoryTypeFiltersInput
}

input ComponentTranslationsWeaponStoryTypeInput {
  id: ID
  name: String
  language: ID
}

type ComponentTranslationsWeaponStoryType {
  id: ID!
  name: String
  language: LanguageEntityResponse
}

input ComponentTranslationsWeaponStoryFiltersInput {
  name: StringFilterInput
  language: LanguageFiltersInput
  and: [ComponentTranslationsWeaponStoryFiltersInput]
  or: [ComponentTranslationsWeaponStoryFiltersInput]
  not: ComponentTranslationsWeaponStoryFiltersInput
}

input ComponentTranslationsWeaponStoryInput {
  id: ID
  name: String
  language: ID
}

type ComponentTranslationsWeaponStory {
  id: ID!
  name: String
  language: LanguageEntityResponse
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

input AudioSubtypeFiltersInput {
  id: IDFilterInput
  slug: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [AudioSubtypeFiltersInput]
  or: [AudioSubtypeFiltersInput]
  not: AudioSubtypeFiltersInput
}

input AudioSubtypeInput {
  slug: String
  titles: [ComponentTranslationsSimpleTitleInput]
}

type AudioSubtype {
  slug: String!
  titles(
    filters: ComponentTranslationsSimpleTitleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentTranslationsSimpleTitle]
  createdAt: DateTime
  updatedAt: DateTime
}

type AudioSubtypeEntity {
  id: ID
  attributes: AudioSubtype
}

type AudioSubtypeEntityResponse {
  data: AudioSubtypeEntity
}

type AudioSubtypeEntityResponseCollection {
  data: [AudioSubtypeEntity!]!
  meta: ResponseCollectionMeta!
}

enum ENUM_CATEGORY_SERIES {
  Drakengard
  NieR
  YoRHa
}

input CategoryFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  short: StringFilterInput
  series: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [CategoryFiltersInput]
  or: [CategoryFiltersInput]
  not: CategoryFiltersInput
}

input CategoryInput {
  name: String
  short: String
  series: ENUM_CATEGORY_SERIES
}

type Category {
  name: String!
  short: String!
  series: ENUM_CATEGORY_SERIES
  createdAt: DateTime
  updatedAt: DateTime
}

type CategoryEntity {
  id: ID
  attributes: Category
}

type CategoryEntityResponse {
  data: CategoryEntity
}

type CategoryEntityResponseCollection {
  data: [CategoryEntity!]!
  meta: ResponseCollectionMeta!
}

type CategoryRelationResponseCollection {
  data: [CategoryEntity!]!
}

input ChronologyEraFiltersInput {
  id: IDFilterInput
  starting_year: IntFilterInput
  ending_year: IntFilterInput
  slug: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [ChronologyEraFiltersInput]
  or: [ChronologyEraFiltersInput]
  not: ChronologyEraFiltersInput
}

input ChronologyEraInput {
  starting_year: Int
  ending_year: Int
  slug: String
  title: [ComponentTranslationsChronologyEraInput]
}

type ChronologyEra {
  starting_year: Int!
  ending_year: Int!
  slug: String!
  title(
    filters: ComponentTranslationsChronologyEraFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentTranslationsChronologyEra]
  createdAt: DateTime
  updatedAt: DateTime
}

type ChronologyEraEntity {
  id: ID
  attributes: ChronologyEra
}

type ChronologyEraEntityResponse {
  data: ChronologyEraEntity
}

type ChronologyEraEntityResponseCollection {
  data: [ChronologyEraEntity!]!
  meta: ResponseCollectionMeta!
}

input ChronologyItemFiltersInput {
  id: IDFilterInput
  year: IntFilterInput
  month: IntFilterInput
  day: IntFilterInput
  displayed_date: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [ChronologyItemFiltersInput]
  or: [ChronologyItemFiltersInput]
  not: ChronologyItemFiltersInput
}

input ChronologyItemInput {
  year: Int
  month: Int
  day: Int
  displayed_date: String
  events: [ComponentCollectionsComponentEventInput]
}

type ChronologyItem {
  year: Int!
  month: Int
  day: Int
  displayed_date: String
  events(
    filters: ComponentCollectionsComponentEventFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentCollectionsComponentEvent]
  createdAt: DateTime
  updatedAt: DateTime
}

type ChronologyItemEntity {
  id: ID
  attributes: ChronologyItem
}

type ChronologyItemEntityResponse {
  data: ChronologyItemEntity
}

type ChronologyItemEntityResponseCollection {
  data: [ChronologyItemEntity!]!
  meta: ResponseCollectionMeta!
}

input ContentFiltersInput {
  id: IDFilterInput
  slug: StringFilterInput
  categories: CategoryFiltersInput
  type: ContentTypeFiltersInput
  ranged_contents: RangedContentFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [ContentFiltersInput]
  or: [ContentFiltersInput]
  not: ContentFiltersInput
}

input ContentInput {
  slug: String
  categories: [ID]
  type: ID
  titles: [ComponentTranslationsTitleInput]
  ranged_contents: [ID]
  text_set: [ComponentSetsTextSetInput]
  video_set: [ComponentSetsVideoSetInput]
  audio_set: [ComponentSetsAudioSetInput]
  thumbnail: ID
}

type Content {
  slug: String!
  categories(
    filters: CategoryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CategoryRelationResponseCollection
  type: ContentTypeEntityResponse
  titles(
    filters: ComponentTranslationsTitleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentTranslationsTitle]
  ranged_contents(
    filters: RangedContentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RangedContentRelationResponseCollection
  text_set(
    filters: ComponentSetsTextSetFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentSetsTextSet]
  video_set(
    filters: ComponentSetsVideoSetFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentSetsVideoSet]
  audio_set(
    filters: ComponentSetsAudioSetFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentSetsAudioSet]
  thumbnail: UploadFileEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type ContentEntity {
  id: ID
  attributes: Content
}

type ContentEntityResponse {
  data: ContentEntity
}

type ContentEntityResponseCollection {
  data: [ContentEntity!]!
  meta: ResponseCollectionMeta!
}

input ContentTypeFiltersInput {
  id: IDFilterInput
  slug: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [ContentTypeFiltersInput]
  or: [ContentTypeFiltersInput]
  not: ContentTypeFiltersInput
}

input ContentTypeInput {
  slug: String
  titles: [ComponentTranslationsSimpleTitleInput]
}

type ContentType {
  slug: String!
  titles(
    filters: ComponentTranslationsSimpleTitleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentTranslationsSimpleTitle]
  createdAt: DateTime
  updatedAt: DateTime
}

type ContentTypeEntity {
  id: ID
  attributes: ContentType
}

type ContentTypeEntityResponse {
  data: ContentTypeEntity
}

type ContentTypeEntityResponseCollection {
  data: [ContentTypeEntity!]!
  meta: ResponseCollectionMeta!
}

input CurrencyFiltersInput {
  id: IDFilterInput
  symbol: StringFilterInput
  code: StringFilterInput
  rate_to_usd: FloatFilterInput
  display_decimals: BooleanFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [CurrencyFiltersInput]
  or: [CurrencyFiltersInput]
  not: CurrencyFiltersInput
}

input CurrencyInput {
  symbol: String
  code: String
  rate_to_usd: Float
  display_decimals: Boolean
}

type Currency {
  symbol: String!
  code: String!
  rate_to_usd: Float!
  display_decimals: Boolean!
  createdAt: DateTime
  updatedAt: DateTime
}

type CurrencyEntity {
  id: ID
  attributes: Currency
}

type CurrencyEntityResponse {
  data: CurrencyEntity
}

type CurrencyEntityResponseCollection {
  data: [CurrencyEntity!]!
  meta: ResponseCollectionMeta!
}

input GamePlatformFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  short: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [GamePlatformFiltersInput]
  or: [GamePlatformFiltersInput]
  not: GamePlatformFiltersInput
}

input GamePlatformInput {
  name: String
  short: String
}

type GamePlatform {
  name: String!
  short: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type GamePlatformEntity {
  id: ID
  attributes: GamePlatform
}

type GamePlatformEntityResponse {
  data: GamePlatformEntity
}

type GamePlatformEntityResponseCollection {
  data: [GamePlatformEntity!]!
  meta: ResponseCollectionMeta!
}

type GamePlatformRelationResponseCollection {
  data: [GamePlatformEntity!]!
}

input GlossaryItemFiltersInput {
  id: IDFilterInput
  slug: StringFilterInput
  type: GlossaryItemTypeFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [GlossaryItemFiltersInput]
  or: [GlossaryItemFiltersInput]
  not: GlossaryItemFiltersInput
}

input GlossaryItemInput {
  title: [ComponentTranslationsGlossaryItemInput]
  definitions: [ComponentCollectionsComponentGlossaryDefinitionInput]
  slug: String
  type: ID
  thumbnail: ID
}

type GlossaryItem {
  title(
    filters: ComponentTranslationsGlossaryItemFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentTranslationsGlossaryItem]
  definitions(
    filters: ComponentCollectionsComponentGlossaryDefinitionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentCollectionsComponentGlossaryDefinition]
  slug: String!
  type: GlossaryItemTypeEntityResponse
  thumbnail: UploadFileEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type GlossaryItemEntity {
  id: ID
  attributes: GlossaryItem
}

type GlossaryItemEntityResponse {
  data: GlossaryItemEntity
}

type GlossaryItemEntityResponseCollection {
  data: [GlossaryItemEntity!]!
  meta: ResponseCollectionMeta!
}

input GlossaryItemTypeFiltersInput {
  id: IDFilterInput
  type: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [GlossaryItemTypeFiltersInput]
  or: [GlossaryItemTypeFiltersInput]
  not: GlossaryItemTypeFiltersInput
}

input GlossaryItemTypeInput {
  type: String
}

type GlossaryItemType {
  type: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type GlossaryItemTypeEntity {
  id: ID
  attributes: GlossaryItemType
}

type GlossaryItemTypeEntityResponse {
  data: GlossaryItemTypeEntity
}

type GlossaryItemTypeEntityResponseCollection {
  data: [GlossaryItemTypeEntity!]!
  meta: ResponseCollectionMeta!
}

input GroupSubtypeFiltersInput {
  id: IDFilterInput
  slug: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [GroupSubtypeFiltersInput]
  or: [GroupSubtypeFiltersInput]
  not: GroupSubtypeFiltersInput
}

input GroupSubtypeInput {
  slug: String
  titles: [ComponentTranslationsSimpleTitleInput]
}

type GroupSubtype {
  slug: String!
  titles(
    filters: ComponentTranslationsSimpleTitleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentTranslationsSimpleTitle]
  createdAt: DateTime
  updatedAt: DateTime
}

type GroupSubtypeEntity {
  id: ID
  attributes: GroupSubtype
}

type GroupSubtypeEntityResponse {
  data: GroupSubtypeEntity
}

type GroupSubtypeEntityResponseCollection {
  data: [GroupSubtypeEntity!]!
  meta: ResponseCollectionMeta!
}

input LanguageFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  localized_name: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [LanguageFiltersInput]
  or: [LanguageFiltersInput]
  not: LanguageFiltersInput
}

input LanguageInput {
  name: String
  code: String
  localized_name: String
}

type Language {
  name: String!
  code: String!
  localized_name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type LanguageEntity {
  id: ID
  attributes: Language
}

type LanguageEntityResponse {
  data: LanguageEntity
}

type LanguageEntityResponseCollection {
  data: [LanguageEntity!]!
  meta: ResponseCollectionMeta!
}

type LanguageRelationResponseCollection {
  data: [LanguageEntity!]!
}

union LibraryItemMetadataDynamicZone =
    ComponentMetadataAudio
  | ComponentMetadataBooks
  | ComponentMetadataGame
  | ComponentMetadataGroup
  | ComponentMetadataOther
  | ComponentMetadataVideo
  | Error

scalar LibraryItemMetadataDynamicZoneInput

input LibraryItemFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  subtitle: StringFilterInput
  slug: StringFilterInput
  subitems: LibraryItemFiltersInput
  subitem_of: LibraryItemFiltersInput
  root_item: BooleanFilterInput
  contents: RangedContentFiltersInput
  digital: BooleanFilterInput
  primary: BooleanFilterInput
  submerchs: MerchItemFiltersInput
  categories: CategoryFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [LibraryItemFiltersInput]
  or: [LibraryItemFiltersInput]
  not: LibraryItemFiltersInput
}

input LibraryItemInput {
  title: String
  subtitle: String
  slug: String
  thumbnail: ID
  subitems: [ID]
  subitem_of: [ID]
  root_item: Boolean
  price: ComponentBasicsPriceInput
  metadata: [LibraryItemMetadataDynamicZoneInput!]
  size: ComponentBasicsSizeInput
  release_date: ComponentBasicsDatepickerInput
  descriptions: [ComponentTranslationsLibraryItemsInput]
  gallery: [ID]
  contents: [ID]
  images: ComponentCollectionsComponentLibraryImagesInput
  digital: Boolean
  primary: Boolean
  submerchs: [ID]
  categories: [ID]
}

type LibraryItem {
  title: String!
  subtitle: String
  slug: String!
  thumbnail: UploadFileEntityResponse
  subitems(
    filters: LibraryItemFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): LibraryItemRelationResponseCollection
  subitem_of(
    filters: LibraryItemFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): LibraryItemRelationResponseCollection
  root_item: Boolean!
  price: ComponentBasicsPrice
  metadata: [LibraryItemMetadataDynamicZone]
  size: ComponentBasicsSize
  release_date: ComponentBasicsDatepicker
  descriptions(
    filters: ComponentTranslationsLibraryItemsFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentTranslationsLibraryItems]
  gallery(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  contents(
    filters: RangedContentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RangedContentRelationResponseCollection
  images: ComponentCollectionsComponentLibraryImages
  digital: Boolean!
  primary: Boolean!
  submerchs(
    filters: MerchItemFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): MerchItemRelationResponseCollection
  categories(
    filters: CategoryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CategoryRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type LibraryItemEntity {
  id: ID
  attributes: LibraryItem
}

type LibraryItemEntityResponse {
  data: LibraryItemEntity
}

type LibraryItemEntityResponseCollection {
  data: [LibraryItemEntity!]!
  meta: ResponseCollectionMeta!
}

type LibraryItemRelationResponseCollection {
  data: [LibraryItemEntity!]!
}

input MerchItemFiltersInput {
  id: IDFilterInput
  slug: StringFilterInput
  library_items: LibraryItemFiltersInput
  title: StringFilterInput
  subtitle: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [MerchItemFiltersInput]
  or: [MerchItemFiltersInput]
  not: MerchItemFiltersInput
}

input MerchItemInput {
  slug: String
  library_items: [ID]
  title: String
  subtitle: String
  thumbnail: ID
}

type MerchItem {
  slug: String!
  library_items(
    filters: LibraryItemFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): LibraryItemRelationResponseCollection
  title: String!
  subtitle: String
  thumbnail: UploadFileEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type MerchItemEntity {
  id: ID
  attributes: MerchItem
}

type MerchItemEntityResponse {
  data: MerchItemEntity
}

type MerchItemEntityResponseCollection {
  data: [MerchItemEntity!]!
  meta: ResponseCollectionMeta!
}

type MerchItemRelationResponseCollection {
  data: [MerchItemEntity!]!
}

input MetadataTypeFiltersInput {
  id: IDFilterInput
  slug: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [MetadataTypeFiltersInput]
  or: [MetadataTypeFiltersInput]
  not: MetadataTypeFiltersInput
}

input MetadataTypeInput {
  slug: String
  titles: [ComponentTranslationsSimpleTitleInput]
}

type MetadataType {
  slug: String!
  titles(
    filters: ComponentTranslationsSimpleTitleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentTranslationsSimpleTitle]
  createdAt: DateTime
  updatedAt: DateTime
}

type MetadataTypeEntity {
  id: ID
  attributes: MetadataType
}

type MetadataTypeEntityResponse {
  data: MetadataTypeEntity
}

type MetadataTypeEntityResponseCollection {
  data: [MetadataTypeEntity!]!
  meta: ResponseCollectionMeta!
}

input PostFiltersInput {
  id: IDFilterInput
  authors: RecorderFiltersInput
  slug: StringFilterInput
  categories: CategoryFiltersInput
  hidden: BooleanFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [PostFiltersInput]
  or: [PostFiltersInput]
  not: PostFiltersInput
}

input PostInput {
  authors: [ID]
  slug: String
  categories: [ID]
  translations: [ComponentTranslationsPostsInput]
  hidden: Boolean
  thumbnail: ID
}

type Post {
  authors(
    filters: RecorderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecorderRelationResponseCollection
  slug: String!
  categories(
    filters: CategoryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CategoryRelationResponseCollection
  translations(
    filters: ComponentTranslationsPostsFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentTranslationsPosts]
  hidden: Boolean!
  thumbnail: UploadFileEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type PostEntity {
  id: ID
  attributes: Post
}

type PostEntityResponse {
  data: PostEntity
}

type PostEntityResponseCollection {
  data: [PostEntity!]!
  meta: ResponseCollectionMeta!
}

union RangedContentRangeDynamicZone =
    ComponentRangePageRange
  | ComponentRangeTimeRange
  | ComponentRangeOther
  | Error

scalar RangedContentRangeDynamicZoneInput

input RangedContentFiltersInput {
  id: IDFilterInput
  slug: StringFilterInput
  library_item: LibraryItemFiltersInput
  content: ContentFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [RangedContentFiltersInput]
  or: [RangedContentFiltersInput]
  not: RangedContentFiltersInput
}

input RangedContentInput {
  slug: String
  range: [RangedContentRangeDynamicZoneInput!]
  scan_set: [ComponentSetsScanSetInput]
  library_item: ID
  content: ID
}

type RangedContent {
  slug: String!
  range: [RangedContentRangeDynamicZone]!
  scan_set(
    filters: ComponentSetsScanSetFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentSetsScanSet]
  library_item: LibraryItemEntityResponse
  content: ContentEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type RangedContentEntity {
  id: ID
  attributes: RangedContent
}

type RangedContentEntityResponse {
  data: RangedContentEntity
}

type RangedContentEntityResponseCollection {
  data: [RangedContentEntity!]!
  meta: ResponseCollectionMeta!
}

type RangedContentRelationResponseCollection {
  data: [RangedContentEntity!]!
}

input RecorderFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  anonymize: BooleanFilterInput
  anonymous_code: StringFilterInput
  languages: LanguageFiltersInput
  pronouns: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [RecorderFiltersInput]
  or: [RecorderFiltersInput]
  not: RecorderFiltersInput
}

input RecorderInput {
  username: String
  anonymize: Boolean
  anonymous_code: String
  avatar: ID
  languages: [ID]
  pronouns: String
  bio: [ComponentTranslationsBioInput]
}

type Recorder {
  username: String!
  anonymize: Boolean!
  anonymous_code: String!
  avatar: UploadFileEntityResponse
  languages(
    filters: LanguageFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): LanguageRelationResponseCollection
  pronouns: String
  bio(
    filters: ComponentTranslationsBioFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentTranslationsBio]
  createdAt: DateTime
  updatedAt: DateTime
}

type RecorderEntity {
  id: ID
  attributes: Recorder
}

type RecorderEntityResponse {
  data: RecorderEntity
}

type RecorderEntityResponseCollection {
  data: [RecorderEntity!]!
  meta: ResponseCollectionMeta!
}

type RecorderRelationResponseCollection {
  data: [RecorderEntity!]!
}

input SourceFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  content: ContentFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [SourceFiltersInput]
  or: [SourceFiltersInput]
  not: SourceFiltersInput
}

input SourceInput {
  name: String
  content: ID
}

type Source {
  name: String!
  content: ContentEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type SourceEntity {
  id: ID
  attributes: Source
}

type SourceEntityResponse {
  data: SourceEntity
}

type SourceEntityResponseCollection {
  data: [SourceEntity!]!
  meta: ResponseCollectionMeta!
}

input TextualSubtypeFiltersInput {
  id: IDFilterInput
  slug: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [TextualSubtypeFiltersInput]
  or: [TextualSubtypeFiltersInput]
  not: TextualSubtypeFiltersInput
}

input TextualSubtypeInput {
  slug: String
  titles: [ComponentTranslationsSimpleTitleInput]
}

type TextualSubtype {
  slug: String!
  titles(
    filters: ComponentTranslationsSimpleTitleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentTranslationsSimpleTitle]
  createdAt: DateTime
  updatedAt: DateTime
}

type TextualSubtypeEntity {
  id: ID
  attributes: TextualSubtype
}

type TextualSubtypeEntityResponse {
  data: TextualSubtypeEntity
}

type TextualSubtypeEntityResponseCollection {
  data: [TextualSubtypeEntity!]!
  meta: ResponseCollectionMeta!
}

input VideoSubtypeFiltersInput {
  id: IDFilterInput
  slug: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [VideoSubtypeFiltersInput]
  or: [VideoSubtypeFiltersInput]
  not: VideoSubtypeFiltersInput
}

input VideoSubtypeInput {
  slug: String
  titles: [ComponentTranslationsSimpleTitleInput]
}

type VideoSubtype {
  slug: String!
  titles(
    filters: ComponentTranslationsSimpleTitleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentTranslationsSimpleTitle]
  createdAt: DateTime
  updatedAt: DateTime
}

type VideoSubtypeEntity {
  id: ID
  attributes: VideoSubtype
}

type VideoSubtypeEntityResponse {
  data: VideoSubtypeEntity
}

type VideoSubtypeEntityResponseCollection {
  data: [VideoSubtypeEntity!]!
  meta: ResponseCollectionMeta!
}

input WeaponStoryFiltersInput {
  id: IDFilterInput
  slug: StringFilterInput
  type: WeaponStoryTypeFiltersInput
  weapon_group: WeaponStoryGroupFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [WeaponStoryFiltersInput]
  or: [WeaponStoryFiltersInput]
  not: WeaponStoryFiltersInput
}

input WeaponStoryInput {
  name: [ComponentTranslationsWeaponStoryInput]
  slug: String
  stories: [ComponentCollectionsComponentWeaponStoryInput]
  type: ID
  thumbnail: ID
  weapon_group: ID
}

type WeaponStory {
  name(
    filters: ComponentTranslationsWeaponStoryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentTranslationsWeaponStory]
  slug: String
  stories(
    filters: ComponentCollectionsComponentWeaponStoryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentCollectionsComponentWeaponStory]
  type: WeaponStoryTypeEntityResponse
  thumbnail: UploadFileEntityResponse
  weapon_group: WeaponStoryGroupEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type WeaponStoryEntity {
  id: ID
  attributes: WeaponStory
}

type WeaponStoryEntityResponse {
  data: WeaponStoryEntity
}

type WeaponStoryEntityResponseCollection {
  data: [WeaponStoryEntity!]!
  meta: ResponseCollectionMeta!
}

type WeaponStoryRelationResponseCollection {
  data: [WeaponStoryEntity!]!
}

input WeaponStoryGroupFiltersInput {
  id: IDFilterInput
  weapons: WeaponStoryFiltersInput
  slug: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [WeaponStoryGroupFiltersInput]
  or: [WeaponStoryGroupFiltersInput]
  not: WeaponStoryGroupFiltersInput
}

input WeaponStoryGroupInput {
  weapons: [ID]
  slug: String
}

type WeaponStoryGroup {
  weapons(
    filters: WeaponStoryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): WeaponStoryRelationResponseCollection
  slug: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type WeaponStoryGroupEntity {
  id: ID
  attributes: WeaponStoryGroup
}

type WeaponStoryGroupEntityResponse {
  data: WeaponStoryGroupEntity
}

type WeaponStoryGroupEntityResponseCollection {
  data: [WeaponStoryGroupEntity!]!
  meta: ResponseCollectionMeta!
}

input WeaponStoryTypeFiltersInput {
  id: IDFilterInput
  slug: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [WeaponStoryTypeFiltersInput]
  or: [WeaponStoryTypeFiltersInput]
  not: WeaponStoryTypeFiltersInput
}

input WeaponStoryTypeInput {
  slug: String
  translations: [ComponentTranslationsWeaponStoryTypeInput]
}

type WeaponStoryType {
  slug: String!
  translations(
    filters: ComponentTranslationsWeaponStoryTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentTranslationsWeaponStoryType]
  createdAt: DateTime
  updatedAt: DateTime
}

type WeaponStoryTypeEntity {
  id: ID
  attributes: WeaponStoryType
}

type WeaponStoryTypeEntityResponse {
  data: WeaponStoryTypeEntity
}

type WeaponStoryTypeEntityResponseCollection {
  data: [WeaponStoryTypeEntity!]!
  meta: ResponseCollectionMeta!
}

input WebsiteInterfaceFiltersInput {
  id: IDFilterInput
  library: StringFilterInput
  contents: StringFilterInput
  wiki: StringFilterInput
  chronicles: StringFilterInput
  library_short_description: StringFilterInput
  contents_short_description: StringFilterInput
  wiki_short_description: StringFilterInput
  chronicles_short_description: StringFilterInput
  news: StringFilterInput
  merch: StringFilterInput
  gallery: StringFilterInput
  archives: StringFilterInput
  about_us: StringFilterInput
  licensing_notice: StringFilterInput
  copyright_notice: StringFilterInput
  contents_description: StringFilterInput
  type: StringFilterInput
  category: StringFilterInput
  categories: StringFilterInput
  size: StringFilterInput
  release_date: StringFilterInput
  release_year: StringFilterInput
  details: StringFilterInput
  price: StringFilterInput
  width: StringFilterInput
  height: StringFilterInput
  thickness: StringFilterInput
  subitem: StringFilterInput
  subitems: StringFilterInput
  subitem_of: StringFilterInput
  variant: StringFilterInput
  variants: StringFilterInput
  variant_of: StringFilterInput
  summary: StringFilterInput
  audio: StringFilterInput
  video: StringFilterInput
  textual: StringFilterInput
  game: StringFilterInput
  other: StringFilterInput
  return_to: StringFilterInput
  left_to_right: StringFilterInput
  right_to_left: StringFilterInput
  page: StringFilterInput
  pages: StringFilterInput
  page_order: StringFilterInput
  binding: StringFilterInput
  type_information: StringFilterInput
  front_matter: StringFilterInput
  back_matter: StringFilterInput
  open_content: StringFilterInput
  read_content: StringFilterInput
  watch_content: StringFilterInput
  listen_content: StringFilterInput
  view_scans: StringFilterInput
  paperback: StringFilterInput
  hardcover: StringFilterInput
  ui_language: LanguageFiltersInput
  languages: StringFilterInput
  select_language: StringFilterInput
  language: StringFilterInput
  library_description: StringFilterInput
  wiki_description: StringFilterInput
  chronicles_description: StringFilterInput
  news_description: StringFilterInput
  merch_description: StringFilterInput
  gallery_description: StringFilterInput
  archives_description: StringFilterInput
  about_us_description: StringFilterInput
  page_not_found: StringFilterInput
  default_description: StringFilterInput
  name: StringFilterInput
  show_subitems: StringFilterInput
  show_primary_items: StringFilterInput
  show_secondary_items: StringFilterInput
  no_type: StringFilterInput
  no_year: StringFilterInput
  order_by: StringFilterInput
  group_by: StringFilterInput
  select_option_sidebar: StringFilterInput
  group: StringFilterInput
  settings: StringFilterInput
  theme: StringFilterInput
  light: StringFilterInput
  auto: StringFilterInput
  dark: StringFilterInput
  font_size: StringFilterInput
  player_name: StringFilterInput
  currency: StringFilterInput
  font: StringFilterInput
  calculated: StringFilterInput
  status_incomplete: StringFilterInput
  status_draft: StringFilterInput
  status_review: StringFilterInput
  status_done: StringFilterInput
  incomplete: StringFilterInput
  draft: StringFilterInput
  review: StringFilterInput
  done: StringFilterInput
  status: StringFilterInput
  transcribers: StringFilterInput
  translators: StringFilterInput
  proofreaders: StringFilterInput
  transcript_notice: StringFilterInput
  translation_notice: StringFilterInput
  source_language: StringFilterInput
  pronouns: StringFilterInput
  no_category: StringFilterInput
  item: StringFilterInput
  items: StringFilterInput
  content: StringFilterInput
  result: StringFilterInput
  results: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [WebsiteInterfaceFiltersInput]
  or: [WebsiteInterfaceFiltersInput]
  not: WebsiteInterfaceFiltersInput
}

input WebsiteInterfaceInput {
  library: String
  contents: String
  wiki: String
  chronicles: String
  library_short_description: String
  contents_short_description: String
  wiki_short_description: String
  chronicles_short_description: String
  news: String
  merch: String
  gallery: String
  archives: String
  about_us: String
  licensing_notice: String
  copyright_notice: String
  contents_description: String
  type: String
  category: String
  categories: String
  size: String
  release_date: String
  release_year: String
  details: String
  price: String
  width: String
  height: String
  thickness: String
  subitem: String
  subitems: String
  subitem_of: String
  variant: String
  variants: String
  variant_of: String
  summary: String
  audio: String
  video: String
  textual: String
  game: String
  other: String
  return_to: String
  left_to_right: String
  right_to_left: String
  page: String
  pages: String
  page_order: String
  binding: String
  type_information: String
  front_matter: String
  back_matter: String
  open_content: String
  read_content: String
  watch_content: String
  listen_content: String
  view_scans: String
  paperback: String
  hardcover: String
  ui_language: ID
  languages: String
  select_language: String
  language: String
  library_description: String
  wiki_description: String
  chronicles_description: String
  news_description: String
  merch_description: String
  gallery_description: String
  archives_description: String
  about_us_description: String
  page_not_found: String
  default_description: String
  name: String
  show_subitems: String
  show_primary_items: String
  show_secondary_items: String
  no_type: String
  no_year: String
  order_by: String
  group_by: String
  select_option_sidebar: String
  group: String
  settings: String
  theme: String
  light: String
  auto: String
  dark: String
  font_size: String
  player_name: String
  currency: String
  font: String
  calculated: String
  status_incomplete: String
  status_draft: String
  status_review: String
  status_done: String
  incomplete: String
  draft: String
  review: String
  done: String
  status: String
  transcribers: String
  translators: String
  proofreaders: String
  transcript_notice: String
  translation_notice: String
  source_language: String
  pronouns: String
  no_category: String
  item: String
  items: String
  content: String
  result: String
  results: String
}

type WebsiteInterface {
  library: String
  contents: String
  wiki: String
  chronicles: String
  library_short_description: String
  contents_short_description: String
  wiki_short_description: String
  chronicles_short_description: String
  news: String
  merch: String
  gallery: String
  archives: String
  about_us: String
  licensing_notice: String
  copyright_notice: String
  contents_description: String
  type: String
  category: String
  categories: String
  size: String
  release_date: String
  release_year: String
  details: String
  price: String
  width: String
  height: String
  thickness: String
  subitem: String
  subitems: String
  subitem_of: String
  variant: String
  variants: String
  variant_of: String
  summary: String
  audio: String
  video: String
  textual: String
  game: String
  other: String
  return_to: String
  left_to_right: String
  right_to_left: String
  page: String
  pages: String
  page_order: String
  binding: String
  type_information: String
  front_matter: String
  back_matter: String
  open_content: String
  read_content: String
  watch_content: String
  listen_content: String
  view_scans: String
  paperback: String
  hardcover: String
  ui_language: LanguageEntityResponse
  languages: String
  select_language: String
  language: String
  library_description: String
  wiki_description: String
  chronicles_description: String
  news_description: String
  merch_description: String
  gallery_description: String
  archives_description: String
  about_us_description: String
  page_not_found: String
  default_description: String
  name: String
  show_subitems: String
  show_primary_items: String
  show_secondary_items: String
  no_type: String
  no_year: String
  order_by: String
  group_by: String
  select_option_sidebar: String
  group: String
  settings: String
  theme: String
  light: String
  auto: String
  dark: String
  font_size: String
  player_name: String
  currency: String
  font: String
  calculated: String
  status_incomplete: String
  status_draft: String
  status_review: String
  status_done: String
  incomplete: String
  draft: String
  review: String
  done: String
  status: String
  transcribers: String
  translators: String
  proofreaders: String
  transcript_notice: String
  translation_notice: String
  source_language: String
  pronouns: String
  no_category: String
  item: String
  items: String
  content: String
  result: String
  results: String
  createdAt: DateTime
  updatedAt: DateTime
}

type WebsiteInterfaceEntity {
  id: ID
  attributes: WebsiteInterface
}

type WebsiteInterfaceEntityResponse {
  data: WebsiteInterfaceEntity
}

type WebsiteInterfaceEntityResponseCollection {
  data: [WebsiteInterfaceEntity!]!
  meta: ResponseCollectionMeta!
}

input WikiPageFiltersInput {
  id: IDFilterInput
  slug: StringFilterInput
  type: WikiPageTypeFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [WikiPageFiltersInput]
  or: [WikiPageFiltersInput]
  not: WikiPageFiltersInput
}

input WikiPageInput {
  slug: String
  thumbnail: ID
  wiki_set: [ComponentSetsWikiSetInput]
  type: ID
}

type WikiPage {
  slug: String!
  thumbnail: UploadFileEntityResponse
  wiki_set(
    filters: ComponentSetsWikiSetFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentSetsWikiSet]
  type: WikiPageTypeEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type WikiPageEntity {
  id: ID
  attributes: WikiPage
}

type WikiPageEntityResponse {
  data: WikiPageEntity
}

type WikiPageEntityResponseCollection {
  data: [WikiPageEntity!]!
  meta: ResponseCollectionMeta!
}

input WikiPageTypeFiltersInput {
  id: IDFilterInput
  slug: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [WikiPageTypeFiltersInput]
  or: [WikiPageTypeFiltersInput]
  not: WikiPageTypeFiltersInput
}

input WikiPageTypeInput {
  slug: String
  titles: [ComponentTranslationsSimpleTitleInput]
}

type WikiPageType {
  slug: String!
  titles(
    filters: ComponentTranslationsSimpleTitleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentTranslationsSimpleTitle]
  createdAt: DateTime
  updatedAt: DateTime
}

type WikiPageTypeEntity {
  id: ID
  attributes: WikiPageType
}

type WikiPageTypeEntityResponse {
  data: WikiPageTypeEntity
}

type WikiPageTypeEntityResponseCollection {
  data: [WikiPageTypeEntity!]!
  meta: ResponseCollectionMeta!
}

union GenericMorph =
    ComponentBasicsCredits
  | ComponentBasicsDatepicker
  | ComponentBasicsPrice
  | ComponentBasicsSize
  | ComponentCollectionsComponentEvent
  | ComponentCollectionsComponentGlossaryDefinition
  | ComponentCollectionsComponentLibraryCover
  | ComponentCollectionsComponentLibraryDustJacket
  | ComponentCollectionsComponentLibraryImages
  | ComponentCollectionsComponentLibraryObiBelt
  | ComponentCollectionsComponentTitles
  | ComponentCollectionsComponentWeaponStory
  | ComponentCollectionsComponentWikiDefinition
  | ComponentMetadataAudio
  | ComponentMetadataBooks
  | ComponentMetadataGame
  | ComponentMetadataGroup
  | ComponentMetadataMerch
  | ComponentMetadataOther
  | ComponentMetadataVideo
  | ComponentPageBuilderComponentPane
  | ComponentPageBuilderComponentTab
  | ComponentPageBuilderGallery
  | ComponentPageBuilderGrid
  | ComponentPageBuilderTabs
  | ComponentPageBuilderText
  | ComponentRangeGameAspect
  | ComponentRangeOther
  | ComponentRangePageRange
  | ComponentRangeTimeRange
  | ComponentSetsAudioSet
  | ComponentSetsScanSet
  | ComponentSetsTextSet
  | ComponentSetsVideoSet
  | ComponentSetsWikiSet
  | ComponentSourceUrlSource
  | ComponentTranslationsAudioSets
  | ComponentTranslationsBio
  | ComponentTranslationsChronologyEra
  | ComponentTranslationsChronologyItem
  | ComponentTranslationsGlossaryDefinition
  | ComponentTranslationsGlossaryItem
  | ComponentTranslationsLibraryContent
  | ComponentTranslationsLibraryItems
  | ComponentTranslationsPosts
  | ComponentTranslationsScanSet
  | ComponentTranslationsSimpleTitle
  | ComponentTranslationsTextSet
  | ComponentTranslationsTitle
  | ComponentTranslationsVideoSets
  | ComponentTranslationsWeaponStoryStory
  | ComponentTranslationsWeaponStoryType
  | ComponentTranslationsWeaponStory
  | UploadFile
  | AudioSubtype
  | Category
  | ChronologyEra
  | ChronologyItem
  | Content
  | ContentType
  | Currency
  | GamePlatform
  | GlossaryItem
  | GlossaryItemType
  | GroupSubtype
  | Language
  | LibraryItem
  | MerchItem
  | MetadataType
  | Post
  | RangedContent
  | Recorder
  | Source
  | TextualSubtype
  | VideoSubtype
  | WeaponStory
  | WeaponStoryGroup
  | WeaponStoryType
  | WebsiteInterface
  | WikiPage
  | WikiPageType

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileEntityResponseCollection
  audioSubtype(id: ID): AudioSubtypeEntityResponse
  audioSubtypes(
    filters: AudioSubtypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AudioSubtypeEntityResponseCollection
  category(id: ID): CategoryEntityResponse
  categories(
    filters: CategoryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CategoryEntityResponseCollection
  chronologyEra(id: ID): ChronologyEraEntityResponse
  chronologyEras(
    filters: ChronologyEraFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ChronologyEraEntityResponseCollection
  chronologyItem(id: ID): ChronologyItemEntityResponse
  chronologyItems(
    filters: ChronologyItemFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ChronologyItemEntityResponseCollection
  content(id: ID): ContentEntityResponse
  contents(
    filters: ContentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ContentEntityResponseCollection
  contentType(id: ID): ContentTypeEntityResponse
  contentTypes(
    filters: ContentTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ContentTypeEntityResponseCollection
  currency(id: ID): CurrencyEntityResponse
  currencies(
    filters: CurrencyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CurrencyEntityResponseCollection
  gamePlatform(id: ID): GamePlatformEntityResponse
  gamePlatforms(
    filters: GamePlatformFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): GamePlatformEntityResponseCollection
  glossaryItem(id: ID): GlossaryItemEntityResponse
  glossaryItems(
    filters: GlossaryItemFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): GlossaryItemEntityResponseCollection
  glossaryItemType(id: ID): GlossaryItemTypeEntityResponse
  glossaryItemTypes(
    filters: GlossaryItemTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): GlossaryItemTypeEntityResponseCollection
  groupSubtype(id: ID): GroupSubtypeEntityResponse
  groupSubtypes(
    filters: GroupSubtypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): GroupSubtypeEntityResponseCollection
  language(id: ID): LanguageEntityResponse
  languages(
    filters: LanguageFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): LanguageEntityResponseCollection
  libraryItem(id: ID): LibraryItemEntityResponse
  libraryItems(
    filters: LibraryItemFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): LibraryItemEntityResponseCollection
  merchItem(id: ID): MerchItemEntityResponse
  merchItems(
    filters: MerchItemFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): MerchItemEntityResponseCollection
  metadataType(id: ID): MetadataTypeEntityResponse
  metadataTypes(
    filters: MetadataTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): MetadataTypeEntityResponseCollection
  post(id: ID): PostEntityResponse
  posts(
    filters: PostFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): PostEntityResponseCollection
  rangedContent(id: ID): RangedContentEntityResponse
  rangedContents(
    filters: RangedContentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RangedContentEntityResponseCollection
  recorder(id: ID): RecorderEntityResponse
  recorders(
    filters: RecorderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecorderEntityResponseCollection
  source(id: ID): SourceEntityResponse
  sources(
    filters: SourceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): SourceEntityResponseCollection
  textualSubtype(id: ID): TextualSubtypeEntityResponse
  textualSubtypes(
    filters: TextualSubtypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TextualSubtypeEntityResponseCollection
  videoSubtype(id: ID): VideoSubtypeEntityResponse
  videoSubtypes(
    filters: VideoSubtypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): VideoSubtypeEntityResponseCollection
  weaponStory(id: ID): WeaponStoryEntityResponse
  weaponStories(
    filters: WeaponStoryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): WeaponStoryEntityResponseCollection
  weaponStoryGroup(id: ID): WeaponStoryGroupEntityResponse
  weaponStoryGroups(
    filters: WeaponStoryGroupFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): WeaponStoryGroupEntityResponseCollection
  weaponStoryType(id: ID): WeaponStoryTypeEntityResponse
  weaponStoryTypes(
    filters: WeaponStoryTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): WeaponStoryTypeEntityResponseCollection
  websiteInterface(id: ID): WebsiteInterfaceEntityResponse
  websiteInterfaces(
    filters: WebsiteInterfaceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): WebsiteInterfaceEntityResponseCollection
  wikiPage(id: ID): WikiPageEntityResponse
  wikiPages(
    filters: WikiPageFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): WikiPageEntityResponseCollection
  wikiPageType(id: ID): WikiPageTypeEntityResponse
  wikiPageTypes(
    filters: WikiPageTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): WikiPageTypeEntityResponseCollection
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createAudioSubtype(data: AudioSubtypeInput!): AudioSubtypeEntityResponse
  updateAudioSubtype(
    id: ID!
    data: AudioSubtypeInput!
  ): AudioSubtypeEntityResponse
  deleteAudioSubtype(id: ID!): AudioSubtypeEntityResponse
  createCategory(data: CategoryInput!): CategoryEntityResponse
  updateCategory(id: ID!, data: CategoryInput!): CategoryEntityResponse
  deleteCategory(id: ID!): CategoryEntityResponse
  createChronologyEra(data: ChronologyEraInput!): ChronologyEraEntityResponse
  updateChronologyEra(
    id: ID!
    data: ChronologyEraInput!
  ): ChronologyEraEntityResponse
  deleteChronologyEra(id: ID!): ChronologyEraEntityResponse
  createChronologyItem(data: ChronologyItemInput!): ChronologyItemEntityResponse
  updateChronologyItem(
    id: ID!
    data: ChronologyItemInput!
  ): ChronologyItemEntityResponse
  deleteChronologyItem(id: ID!): ChronologyItemEntityResponse
  createContent(data: ContentInput!): ContentEntityResponse
  updateContent(id: ID!, data: ContentInput!): ContentEntityResponse
  deleteContent(id: ID!): ContentEntityResponse
  createContentType(data: ContentTypeInput!): ContentTypeEntityResponse
  updateContentType(id: ID!, data: ContentTypeInput!): ContentTypeEntityResponse
  deleteContentType(id: ID!): ContentTypeEntityResponse
  createCurrency(data: CurrencyInput!): CurrencyEntityResponse
  updateCurrency(id: ID!, data: CurrencyInput!): CurrencyEntityResponse
  deleteCurrency(id: ID!): CurrencyEntityResponse
  createGamePlatform(data: GamePlatformInput!): GamePlatformEntityResponse
  updateGamePlatform(
    id: ID!
    data: GamePlatformInput!
  ): GamePlatformEntityResponse
  deleteGamePlatform(id: ID!): GamePlatformEntityResponse
  createGlossaryItem(data: GlossaryItemInput!): GlossaryItemEntityResponse
  updateGlossaryItem(
    id: ID!
    data: GlossaryItemInput!
  ): GlossaryItemEntityResponse
  deleteGlossaryItem(id: ID!): GlossaryItemEntityResponse
  createGlossaryItemType(
    data: GlossaryItemTypeInput!
  ): GlossaryItemTypeEntityResponse
  updateGlossaryItemType(
    id: ID!
    data: GlossaryItemTypeInput!
  ): GlossaryItemTypeEntityResponse
  deleteGlossaryItemType(id: ID!): GlossaryItemTypeEntityResponse
  createGroupSubtype(data: GroupSubtypeInput!): GroupSubtypeEntityResponse
  updateGroupSubtype(
    id: ID!
    data: GroupSubtypeInput!
  ): GroupSubtypeEntityResponse
  deleteGroupSubtype(id: ID!): GroupSubtypeEntityResponse
  createLanguage(data: LanguageInput!): LanguageEntityResponse
  updateLanguage(id: ID!, data: LanguageInput!): LanguageEntityResponse
  deleteLanguage(id: ID!): LanguageEntityResponse
  createLibraryItem(data: LibraryItemInput!): LibraryItemEntityResponse
  updateLibraryItem(id: ID!, data: LibraryItemInput!): LibraryItemEntityResponse
  deleteLibraryItem(id: ID!): LibraryItemEntityResponse
  createMerchItem(data: MerchItemInput!): MerchItemEntityResponse
  updateMerchItem(id: ID!, data: MerchItemInput!): MerchItemEntityResponse
  deleteMerchItem(id: ID!): MerchItemEntityResponse
  createMetadataType(data: MetadataTypeInput!): MetadataTypeEntityResponse
  updateMetadataType(
    id: ID!
    data: MetadataTypeInput!
  ): MetadataTypeEntityResponse
  deleteMetadataType(id: ID!): MetadataTypeEntityResponse
  createPost(data: PostInput!): PostEntityResponse
  updatePost(id: ID!, data: PostInput!): PostEntityResponse
  deletePost(id: ID!): PostEntityResponse
  createRangedContent(data: RangedContentInput!): RangedContentEntityResponse
  updateRangedContent(
    id: ID!
    data: RangedContentInput!
  ): RangedContentEntityResponse
  deleteRangedContent(id: ID!): RangedContentEntityResponse
  createRecorder(data: RecorderInput!): RecorderEntityResponse
  updateRecorder(id: ID!, data: RecorderInput!): RecorderEntityResponse
  deleteRecorder(id: ID!): RecorderEntityResponse
  createSource(data: SourceInput!): SourceEntityResponse
  updateSource(id: ID!, data: SourceInput!): SourceEntityResponse
  deleteSource(id: ID!): SourceEntityResponse
  createTextualSubtype(data: TextualSubtypeInput!): TextualSubtypeEntityResponse
  updateTextualSubtype(
    id: ID!
    data: TextualSubtypeInput!
  ): TextualSubtypeEntityResponse
  deleteTextualSubtype(id: ID!): TextualSubtypeEntityResponse
  createVideoSubtype(data: VideoSubtypeInput!): VideoSubtypeEntityResponse
  updateVideoSubtype(
    id: ID!
    data: VideoSubtypeInput!
  ): VideoSubtypeEntityResponse
  deleteVideoSubtype(id: ID!): VideoSubtypeEntityResponse
  createWeaponStory(data: WeaponStoryInput!): WeaponStoryEntityResponse
  updateWeaponStory(id: ID!, data: WeaponStoryInput!): WeaponStoryEntityResponse
  deleteWeaponStory(id: ID!): WeaponStoryEntityResponse
  createWeaponStoryGroup(
    data: WeaponStoryGroupInput!
  ): WeaponStoryGroupEntityResponse
  updateWeaponStoryGroup(
    id: ID!
    data: WeaponStoryGroupInput!
  ): WeaponStoryGroupEntityResponse
  deleteWeaponStoryGroup(id: ID!): WeaponStoryGroupEntityResponse
  createWeaponStoryType(
    data: WeaponStoryTypeInput!
  ): WeaponStoryTypeEntityResponse
  updateWeaponStoryType(
    id: ID!
    data: WeaponStoryTypeInput!
  ): WeaponStoryTypeEntityResponse
  deleteWeaponStoryType(id: ID!): WeaponStoryTypeEntityResponse
  createWebsiteInterface(
    data: WebsiteInterfaceInput!
  ): WebsiteInterfaceEntityResponse
  updateWebsiteInterface(
    id: ID!
    data: WebsiteInterfaceInput!
  ): WebsiteInterfaceEntityResponse
  deleteWebsiteInterface(id: ID!): WebsiteInterfaceEntityResponse
  createWikiPage(data: WikiPageInput!): WikiPageEntityResponse
  updateWikiPage(id: ID!, data: WikiPageInput!): WikiPageEntityResponse
  deleteWikiPage(id: ID!): WikiPageEntityResponse
  createWikiPageType(data: WikiPageTypeInput!): WikiPageTypeEntityResponse
  updateWikiPageType(
    id: ID!
    data: WikiPageTypeInput!
  ): WikiPageTypeEntityResponse
  deleteWikiPageType(id: ID!): WikiPageTypeEntityResponse
  upload(
    refId: ID
    ref: String
    field: String
    info: FileInfoInput
    file: Upload!
  ): UploadFileEntityResponse!
  multipleUpload(
    refId: ID
    ref: String
    field: String
    files: [Upload]!
  ): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse
}
